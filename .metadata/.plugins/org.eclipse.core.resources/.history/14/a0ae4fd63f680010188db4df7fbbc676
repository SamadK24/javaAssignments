package com.swabhav.GuitarFinal.test;

import com.swabhav.GuitarFinal.model.*;
import java.util.*;

public class GuitarMain {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        GuitarInventory inventory = new GuitarInventory();
        runApplication(inventory);
    }

    private static void runApplication(GuitarInventory inventory) {
        while (true) {
            System.out.println("\n=== Welcome to Guitar Inventory System ===");
            System.out.println("1. Admin");
            System.out.println("2. User");
            System.out.println("3. Exit");
            System.out.print("Enter your role (1-Admin, 2-User, 3-Exit): ");

            int choice = getValidNumberInput(1, 3);
            switch (choice) {
                case 1:
                    adminMenu(inventory);
                    break;
                case 2:
                    userMenu(inventory);
                    break;
                case 3:
                    System.out.println("Exiting... Goodbye!");
                    return;
            }
        }
    }

    private static void adminMenu(GuitarInventory inventory) {
        while (true) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Add Guitar");
            System.out.println("2. View Inventory");
            System.out.println("3. Back to Main Menu");
            System.out.print("Choose an option: ");
            int choice = getValidNumberInput(1, 3);

            switch (choice) {
                case 1:
                    addGuitar(inventory);
                    break;
                case 2:
                    viewInventory(inventory);
                    break;
                case 3:
                    return;
            }
        }
    }

    private static void userMenu(GuitarInventory inventory) {
        while (true) {
            System.out.println("\nUser Menu:");
            System.out.println("1. Search Guitar (Strict Match)");
            System.out.println("2. Search Guitar (Flexible Match)");
            System.out.println("3. Back to Main Menu");
            System.out.print("Choose an option: ");
            int choice = getValidNumberInput(1, 3);

            switch (choice) {
                case 1:
                    searchGuitar(inventory, false);
                    break;
                case 2:
                    searchGuitar(inventory, true);
                    break;
                case 3:
                    return;
            }
        }
    }

    private static void addGuitar(GuitarInventory inventory) {
        System.out.print("Enter Serial Number (e.g., SN1234): ");
        String serialNumber = scanner.nextLine().trim();

        double price;
        while (true) {
            System.out.print("Enter Price (e.g., 999.99): ");
            try {
                price = Double.parseDouble(scanner.nextLine());
                if (price >= 0) break;
                System.out.println("Price cannot be negative.");
            } catch (Exception e) {
                System.out.println("Invalid number. Try again.");
            }
        }

        GuitarSpec spec = getGuitarSpecFromUser();
        inventory.addGuitar(new Final_Guitar(serialNumber, price, spec));
        System.out.println("âœ… Guitar added successfully.");
    }

    private static void viewInventory(GuitarInventory inventory) {
        List<Final_Guitar> guitars = inventory.getAllGuitars();
        System.out.println("\n=== Guitar Inventory ===");
        if (guitars.isEmpty()) {
            System.out.println("No guitars in inventory.");
        } else {
            guitars.forEach(System.out::println);
        }
    }

    private static void searchGuitar(GuitarInventory inventory, boolean isFlexible) {
        System.out.println("\nEnter guitar specifications to search (leave blank to skip in flexible mode):");
        GuitarSpec searchSpec = getGuitarSpecFromUser();
        List<Final_Guitar> matches = isFlexible ?
            inventory.flexibleSearch(searchSpec) : inventory.search(searchSpec);

        System.out.println("\n=== Search Results ===");
        if (matches.isEmpty()) {
            System.out.println("No matching guitars found.");
        } else {
            matches.forEach(System.out::println);
        }
    }

    private static GuitarSpec getGuitarSpecFromUser() {
        Builder builder = getEnumInput("Choose Builder", Builder.values());
        System.out.print("Enter Model (e.g., Stratocaster): ");
        String model = scanner.nextLine().trim();
        Type type = getEnumInput("Choose Type", Type.values());
        int numStrings = getIntInputWithDefault("Enter Number of Strings (e.g., 6)", 6);
        Wood backWood = getEnumInput("Choose Back Wood", Wood.values());
        Wood topWood = getEnumInput("Choose Top Wood", Wood.values());

        return new GuitarSpec(builder, model, type, backWood, topWood, numStrings);
    }

    private static <T extends Enum<T>> T getEnumInput(String prompt, T[] values) {
        while (true) {
            System.out.println(prompt + ":");
            for (int i = 0; i < values.length; i++) {
                System.out.println((i + 1) + ". " + values[i]);
            }
            System.out.print("Enter choice (1-" + values.length + "): ");
            int choice = getValidNumberInput(1, values.length);
            return values[choice - 1];
        }
    }

    private static int getValidNumberInput(int min, int max) {
        while (true) {
            try {
                int input = Integer.parseInt(scanner.nextLine());
                if (input >= min && input <= max) return input;
                System.out.print("Enter a number between " + min + " and " + max + ": ");
            } catch (Exception e) {
                System.out.print("Invalid input. Try again: ");
            }
        }
    }

    private static int getIntInputWithDefault(String prompt, int defaultVal) {
        System.out.print(prompt + " (Press Enter for default " + defaultVal + "): ");
        String input = scanner.nextLine().trim();
        if (input.isEmpty()) return defaultVal;
        try {
            int val = Integer.parseInt(input);
            return Math.max(1, val); // At least 1 string
        } catch (Exception e) {
            System.out.println("Invalid input, using default.");
            return defaultVal;
        }
    }
}
