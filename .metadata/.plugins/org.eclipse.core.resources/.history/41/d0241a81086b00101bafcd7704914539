package com.swabhav.BankingApp.test;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import com.swabhav.BankingApp.model.Accounts;
import com.swabhav.BankingApp.model.BankService;
import com.swabhav.BankingApp.model.Validator;
import com.swabhav.BankingApp.model.InvalidInputException;
import com.swabhav.BankingApp.model.InvalidAmountException;


public class BankingAppTest {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BankService bank = new BankService();
        boolean running = true;

        while (running) {
            System.out.println("\n===== Welcome to Banking System =====");
            System.out.println("1. Add Bank Account");
            System.out.println("2. Check Balance");
            System.out.println("3. Transfer Money");
            System.out.println("4. Deposit Money");
            System.out.println("5. Withdraw Money");
            System.out.println("6. Transaction History");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");

            int choice = -1;
            try {
                choice = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
                continue;
            }

            switch (choice) {
            case 1:
                try {
                    System.out.print("Enter account holder's name: ");
                    String name = sc.nextLine();
                    Validator.validateName(name);

                    double initialAmount = getValidDouble(sc, "Enter initial deposit amount: ");
                    Validator.validateAmount(initialAmount);

                    Accounts newAcc = new Accounts();
                    newAcc.setName(name);
                    newAcc.setBalance(initialAmount);
                    bank.addAccount(newAcc);

                } catch (InvalidInputException | InvalidAmountException e) {
                    System.out.println(e.getMessage());
                }
                break;

                case 2:
                    int accId = getValidInt(sc, "Enter Account ID: ");
                    bank.checkBalance(accId);
                    break;

                case 3:
                    int senderId = getValidInt(sc, "Enter Sender Account ID: ");
                    int receiverId = getValidInt(sc, "Enter Receiver Account ID: ");
                    double amount = getValidDouble(sc, "Enter amount to transfer: ");
                    bank.transferMoney(senderId, receiverId, amount);
                    break;

                case 4:
                    int depId = getValidInt(sc, "Enter Account ID to deposit: ");
                    double depAmount = getValidDouble(sc, "Enter amount to deposit: ");
                    bank.deposit(depId, depAmount);
                    break;

                case 5:
                    int wId = getValidInt(sc, "Enter Account ID to withdraw from: ");
                    double wAmt = getValidDouble(sc, "Enter amount to withdraw: ");
                    bank.withDraw(wId, wAmt);
                    break;

                case 6:
                    int tId = getValidInt(sc, "Enter Account ID to view transactions: ");
                    bank.transactionHistory(tId);
                    break;

                case 7:
                    running = false;
                    System.out.println("Exiting... Thank you!");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
        sc.close();
    }

    private static int getValidInt(Scanner sc, String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                return Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter an integer.");
            }
        }
    }

    private static double getValidDouble(Scanner sc, String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                return Double.parseDouble(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }
    }
}