package com.swabhav.GuitarFinal.test;

import java.util.*;
import com.swabhav.GuitarFinal.model.*;

public class GuitarMain {
    private static final Scanner scanner = new Scanner(System.in);
    private static final GuitarInventory inventory = new GuitarInventory();

    public static void main(String[] args) {
        initializeInventory();
        System.out.println("Welcome to Guitar Inventory System!");

        String role = promptRole();
        if (role.equalsIgnoreCase("ADMIN")) {
            adminMenu();
        } else {
            userMenu();
        }
    }

    private static String promptRole() {
        while (true) {
            System.out.print("Enter your role (Admin/User): ");
            String role = scanner.nextLine().trim();
            if (role.equalsIgnoreCase("Admin") || role.equalsIgnoreCase("User")) {
                return role;
            }
            System.out.println("Invalid role. Please enter 'Admin' or 'User'.\n");
        }
    }

    private static void adminMenu() {
        while (true) {
            System.out.println("\n=== Admin Menu ===");
            System.out.println("1. Add Guitar");
            System.out.println("2. View Inventory");
            System.out.println("3. Exit");
            int choice = promptInt("Enter your choice (e.g. 1): ", 1, 3);

            switch (choice) {
                case 1:
                    Final_Guitar guitar = getGuitarDetailsFromAdmin();
                    inventory.addGuitar(guitar.getSerialNumber(), guitar.getPrice(), guitar.getSpec());
                    System.out.println("Guitar added successfully!");
                    break;
                case 2:
                    displayGuitars(inventory.getAllGuitars());
                    break;
                case 3:
                    return;
            }
        }
    }

    private static void userMenu() {
        while (true) {
            System.out.println("\n=== User Menu ===");
            System.out.println("1. Search Guitars (Flexible Filter)");
            System.out.println("2. Exit");
            int choice = promptInt("Enter your choice (e.g. 1): ", 1, 2);

            if (choice == 1) {
                GuitarSpec userSpec = getUserSpecInput();
                List<Final_Guitar> results = inventory.flexibleSearch(userSpec);
                if (results.isEmpty()) {
                    System.out.println("No matching guitars found.");
                } else {
                    displayGuitars(results);
                }
            } else {
                return;
            }
        }
    }

    private static GuitarSpec getUserSpecInput() {
        System.out.println("\nEnter Guitar Specifications to Search (press Enter to skip a field):");

        Builder builder = promptOptionalEnum("Builder (FENDER, MARTIN, GIBSON, COLLINGS, OLSON, RYAN, PRS): ", Builder.class);
        String model = promptString("Model [e.g. Stratocastor]: ", true);
        Type type = promptOptionalEnum("Type (ACOUSTIC, ELECTRIC): ", Type.class);
        Wood backwood = promptOptionalEnum("Back Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ALDER): ", Wood.class);
        Wood topwood = promptOptionalEnum("Top Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ALDER): ", Wood.class);
        int numStrings = promptOptionalInt("Number of Strings [e.g. 6]: ");

        return new GuitarSpec(builder, model, type, backwood, topwood, numStrings);
    }

    private static Final_Guitar getGuitarDetailsFromAdmin() {
        System.out.println("\nEnter Guitar Details to Add:");

        String serial = promptString("Serial Number [e.g. SN12345]: ", false);
        double price = promptDouble("Price [e.g. 1500.0]: ");
        Builder builder = promptEnum("Builder (FENDER, MARTIN, GIBSON, COLLINGS, OLSON, RYAN, PRS): ", Builder.class);
        String model = promptString("Model [e.g. Stratocastor]: ", false);
        Type type = promptEnum("Type (ACOUSTIC, ELECTRIC): ", Type.class);
        Wood backwood = promptEnum("Back Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ALDER): ", Wood.class);
        Wood topwood = promptEnum("Top Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ALDER): ", Wood.class);
        int numStrings = promptInt("Number of Strings [e.g. 6]: ", 1, 12);

        GuitarSpec spec = new GuitarSpec(builder, model, type, backwood, topwood, numStrings);
        return new Final_Guitar(serial, price, spec);
    }

    private static void displayGuitars(List<Final_Guitar> guitars) {
        for (Final_Guitar guitar : guitars) {
            System.out.println(guitar);
        }
    }

    private static void initializeInventory() {
        inventory.addGuitar("SN001", 1500.0,
                new GuitarSpec(Builder.FENDER, "Stratocastor", Type.ELECTRIC,
                        Wood.ALDER, Wood.ALDER, 6));

        inventory.addGuitar("SN002", 1200.0,
                new GuitarSpec(Builder.MARTIN, "D-28", Type.ACOUSTIC,
                        Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK, 6));
    }

    private static int promptInt(String message, int min, int max) {
        while (true) {
            try {
                System.out.print(message);
                int value = Integer.parseInt(scanner.nextLine().trim());
                if (value < min || value > max) throw new NumberFormatException();
                return value;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number between " + min + " and " + max + ".\n");
            }
        }
    }

    private static double promptDouble(String message) {
        while (true) {
            try {
                System.out.print(message);
                return Double.parseDouble(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid price.\n");
            }
        }
    }

    private static int promptOptionalInt(String message) {
        while (true) {
            try {
                System.out.print(message);
                String input = scanner.nextLine().trim();
                return input.isEmpty() ? 0 : Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.\n");
            }
        }
    }

    private static String promptString(String message, boolean optional) {
        while (true) {
            System.out.print(message);
            String input = scanner.nextLine().trim();
            if (!input.isEmpty() || optional) return input;
            System.out.println("This field is required. Please enter a value.\n");
        }
    }

    private static <T extends Enum<T>> T promptEnum(String message, Class<T> enumType) {
        while (true) {
            System.out.print(message);
            try {
                return Enum.valueOf(enumType, scanner.nextLine().trim().toUpperCase());
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input. Please follow the specified options.\n");
            }
        }
    }

    private static <T extends Enum<T>> T promptOptionalEnum(String message, Class<T> enumType) {
        while (true) {
            System.out.print(message);
            String input = scanner.nextLine().trim();
            if (input.isEmpty()) return null;
            try {
                return Enum.valueOf(enumType, input.toUpperCase());
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input. Please follow the specified options.\n");
            }
        }
    }
}
