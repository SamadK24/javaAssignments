package com.swabhav.GuitarFinal.test;

import java.util.*;

import com.swabhav.GuitarFinal.model.*;

public class GuitarMain {
    private static final Scanner sc = new Scanner(System.in);
    private static final GuitarInventory inventory = new GuitarInventory();

    public static void main(String[] args) {
        preloadInventory();
        System.out.println("Welcome to Guitar Inventory System!");
        String role = getRoleInput();

        if (role.equalsIgnoreCase("admin")) {
            adminMenuLoop();
        } else {
            userMenuLoop();
        }

        System.out.println("Thank you for using the system!");
    }

 
    //role menu method
    private static void adminMenuLoop() {
        while (true) {
            System.out.println("\n=== Admin Menu ===");
            System.out.println("1. Add Guitar");
            System.out.println("2. View Inventory");
            System.out.println("3. Exit");
            System.out.print("Enter your choice (e.g. 1): ");

            String choice = sc.nextLine();
            switch (choice) {
                case "1":
                    addGuitar();
                    break;
                case "2":
                    displayInventory();
                    break;
                case "3":
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void userMenuLoop() {
        while (true) {
            System.out.println("\n=== User Menu ===");
            System.out.println("1. Search Guitar (Flexible Search)");
            System.out.println("2. Exit");
            System.out.print("Enter your choice (e.g. 1): ");

            String choice = sc.nextLine();
            switch (choice) {
                case "1":
                    searchGuitars();
                    break;
                case "2":
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    //admin method

    private static void addGuitar() {
        try {
            System.out.print("Enter Serial Number (e.g. G12345): ");
            String serialNumber = sc.nextLine();

            System.out.print("Enter Price (e.g. 1599.99): ");
            double price = Double.parseDouble(sc.nextLine());

            GuitarSpec spec = getUserSpecInput();

            inventory.addGuitar(serialNumber, price, spec);
            System.out.println("Guitar added successfully.");
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Price must be a number.");
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Unexpected Error: " + e.getMessage());
        }
    }

    private static void displayInventory() {
        List<Final_Guitar> guitars = inventory.getAllGuitars();
        if (guitars.isEmpty()) {
            System.out.println("Inventory is empty.");
            return;
        }
        for (Final_Guitar guitar : guitars) {
            printGuitarDetails(guitar);
        }
    }

   //user method

    private static void searchGuitars() {
        try {
            GuitarSpec searchSpec = getUserSpecInput();

            List<Final_Guitar> results = inventory.flexibleSearch(searchSpec);

            if (results.isEmpty()) {
                System.out.println("No matching guitars found.");
            } else {
                for (Final_Guitar guitar : results) {
                    printGuitarDetails(guitar);
                }
            }
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Unexpected Error: " + e.getMessage());
        }
    }

   //input method

    private static String getRoleInput() {
        while (true) {
            System.out.print("Enter role (Admin/User): ");
            String role = sc.nextLine().trim().toLowerCase();
            if (role.equals("admin") || role.equals("user")) {
                return role;
            } else {
                System.out.println("Invalid role. Please enter Admin or User.");
            }
        }
    }

    private static GuitarSpec getUserSpecInput() {
        try {
            System.out.println("\nEnter Guitar Specifications (leave blank to skip any):");

            System.out.print("Builder (FENDER, MARTIN, GIBSON, COLLINGS, OLSON, RYAN, PRS, ANY) [e.g. FENDER]: ");
            String builderInput = sc.nextLine().trim();
            Builder builder = builderInput.isEmpty() ? null : Builder.valueOf(builderInput.toUpperCase());

            System.out.print("Model [e.g. Stratocastor]: ");
            String model = sc.nextLine().trim();

            System.out.print("Number of Strings [e.g. 6]: ");
            String stringsInput = sc.nextLine().trim();
            Integer numStrings = stringsInput.isEmpty() ? 0 : Integer.parseInt(stringsInput);

            System.out.print("Type (ACOUSTIC, ELECTRIC) [e.g. ELECTRIC]: ");
            String typeInput = sc.nextLine().trim();
            Type type = typeInput.isEmpty() ? null : Type.valueOf(typeInput.toUpperCase());

            System.out.print("Back Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ALDER) [e.g. MAHOGANY]: ");
            String backWoodInput = sc.nextLine().trim();
            Wood backWood = backWoodInput.isEmpty() ? null : Wood.valueOf(backWoodInput.toUpperCase());

            System.out.print("Top Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ALDER) [e.g. MAPLE]: ");
            String topWoodInput = sc.nextLine().trim();
            Wood topWood = topWoodInput.isEmpty() ? null : Wood.valueOf(topWoodInput.toUpperCase());

            return new GuitarSpec(builder, model, numStrings, type, backWood, topWood);

        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid input. Please follow the specified options.");
        }
    }


    private static void printGuitarDetails(Final_Guitar guitar) {
        GuitarSpec spec = guitar.getSpec();
        System.out.println("\n---Guitar Found---");
        System.out.println("Serial Number: " + guitar.getSerialNumber());
        System.out.println("Price: $" + guitar.getPrice());
        System.out.println("Builder: " + spec.getBuilder());
        System.out.println("Model: " + spec.getModel());
        System.out.println("Strings: " + spec.getNumStrings());
        System.out.println("Type: " + spec.getType());
        System.out.println("Back Wood: " + spec.getBackwood());
        System.out.println("Top Wood: " + spec.getTopwood());
        System.out.println("------------------------");
    }

    private static void preloadInventory() {
        inventory.addGuitar("123", 1500.0,
                new GuitarSpec(Builder.FENDER, "Stratocastor", 6, Type.ELECTRIC, Wood.COCOBOLO, Wood.BRAZILIAN_ROSEWOOD));
        inventory.addGuitar("124", 1600.0,
                new GuitarSpec(Builder.FENDER, "Stratocastor", 4, Type.ELECTRIC, Wood.INDIAN_ROSEWOOD, Wood.CEDAR));
        inventory.addGuitar("125", 1700.0,
                new GuitarSpec(Builder.MARTIN, "D-18", 12, Type.ACOUSTIC, Wood.MAPLE, Wood.MAHOGANY));
    }
}
