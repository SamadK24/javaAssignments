package com.swabhav.GuitarFinal.test;

import com.swabhav.GuitarFinal.model.*;

import java.util.*;

public class GuitarMain {
    private static final Scanner sc = new Scanner(System.in);
    private static final GuitarInventory inventory = new GuitarInventory();

    public static void main(String[] args) {
        initializeInventory();

        while (true) {
            try {
                System.out.println("\nLogin as:");
                System.out.println("1. Admin");
                System.out.println("2. User");
                System.out.println("3. Exit");
                System.out.print("Enter your choice (1/2/3): ");
                String roleChoice = sc.nextLine();

                switch (roleChoice) {
                    case "1":
                        showAdminMenu();
                        break;
                    case "2":
                        showUserMenu();
                        break;
                    case "3":
                        System.out.println("Exiting program...");
                        return;
                    default:
                        System.out.println("Invalid choice. Please select 1, 2 or 3.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
                sc.nextLine(); // clear buffer
            }
        }
    }

    private static void showAdminMenu() {
        while (true) {
            System.out.println("\n--- Admin Menu ---");
            System.out.println("1. Add Guitar");
            System.out.println("2. View All Guitars");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice: ");
            String input = sc.nextLine();

            switch (input) {
                case "1":
                    try {
                        Final_Guitar newGuitar = getGuitarFromAdmin();
                        inventory.addGuitar(newGuitar);
                        System.out.println("✅ Guitar added successfully.");
                    } catch (Exception e) {
                        System.out.println("❌ Failed to add guitar: " + e.getMessage());
                    }
                    break;
                case "2":
                    showAllGuitars();
                    break;
                case "3":
                    return;
                default:
                    System.out.println("Invalid input. Please enter 1, 2 or 3.");
            }
        }
    }

    private static void showUserMenu() {
        while (true) {
            System.out.println("\n--- User Menu ---");
            System.out.println("1. Search Guitars");
            System.out.println("2. Back to Main Menu");
            System.out.print("Enter your choice: ");
            String input = sc.nextLine();

            switch (input) {
                case "1":
                    GuitarSpec spec = getUserSearchSpec();
                    List<Final_Guitar> results = inventory.flexibleSearch(spec);
                    if (results.isEmpty()) {
                        System.out.println("No matching guitars found.");
                    } else {
                        System.out.println("\nMatching Guitars:");
                        for (Final_Guitar guitar : results) {
                            System.out.println(guitar);
                        }
                    }
                    break;
                case "2":
                    return;
                default:
                    System.out.println("Invalid input. Please enter 1 or 2.");
            }
        }
    }

    private static Final_Guitar getGuitarFromAdmin() {
        System.out.println("\n--- Add New Guitar ---");
        System.out.print("Enter Serial Number (e.g., SN1234): ");
        String serialNumber = sc.nextLine().trim();

        System.out.print("Enter Price (e.g., 1999.99): ");
        double price = Double.parseDouble(sc.nextLine());

        System.out.print("Enter Builder (FENDER, MARTIN, GIBSON, COLLINGS): ");
        Builder builder = Builder.valueOf(sc.nextLine().trim().toUpperCase());

        System.out.print("Enter Model (e.g., Stratocaster): ");
        String model = sc.nextLine().trim();

        System.out.print("Enter Type (ACOUSTIC, ELECTRIC): ");
        Type type = Type.valueOf(sc.nextLine().trim().toUpperCase());

        System.out.print("Enter Back Wood (e.g., MAHOGANY, MAPLE): ");
        Wood backWood = Wood.valueOf(sc.nextLine().trim().toUpperCase());

        System.out.print("Enter Top Wood (e.g., CEDAR, SITKA): ");
        Wood topWood = Wood.valueOf(sc.nextLine().trim().toUpperCase());

        System.out.print("Enter Number of Strings (e.g., 6): ");
        int numStrings = Integer.parseInt(sc.nextLine());

        GuitarSpec spec = new GuitarSpec(builder, model, type, backWood, topWood, numStrings);
        return new Final_Guitar(serialNumber, price, spec);
    }

    private static GuitarSpec getUserSearchSpec() {
        System.out.println("\n--- Guitar Search ---");
        System.out.println("Note: Leave field blank to skip it.");

        Builder builder = null;
        System.out.print("Enter Builder (FENDER, MARTIN, GIBSON, COLLINGS): ");
        String builderInput = sc.nextLine().trim();
        if (!builderInput.isEmpty()) builder = Builder.valueOf(builderInput.toUpperCase());

        System.out.print("Enter Model (e.g., Stratocaster): ");
        String model = sc.nextLine().trim();

        Type type = null;
        System.out.print("Enter Type (ACOUSTIC, ELECTRIC): ");
        String typeInput = sc.nextLine().trim();
        if (!typeInput.isEmpty()) type = Type.valueOf(typeInput.toUpperCase());

        Wood backWood = null;
        System.out.print("Enter Back Wood (e.g., MAHOGANY, MAPLE): ");
        String backWoodInput = sc.nextLine().trim();
        if (!backWoodInput.isEmpty()) backWood = Wood.valueOf(backWoodInput.toUpperCase());

        Wood topWood = null;
        System.out.print("Enter Top Wood (e.g., CEDAR, SITKA): ");
        String topWoodInput = sc.nextLine().trim();
        if (!topWoodInput.isEmpty()) topWood = Wood.valueOf(topWoodInput.toUpperCase());

        int numStrings = 0;
        System.out.print("Enter Number of Strings (e.g., 6): ");
        String numStringsInput = sc.nextLine().trim();
        if (!numStringsInput.isEmpty()) numStrings = Integer.parseInt(numStringsInput);

        return new GuitarSpec(builder, model, type, backWood, topWood, numStrings);
    }

    private static void showAllGuitars() {
        System.out.println("\n--- Inventory Guitars ---");
        List<Final_Guitar> allGuitars = inventory.getAllGuitars();
        if (allGuitars.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            for (Final_Guitar guitar : allGuitars) {
                System.out.println(guitar);
            }
        }
    }

    private static void initializeInventory() {
        inventory.addGuitar(new Final_Guitar("SN001", 1999.99, new GuitarSpec(
                Builder.FENDER, "Stratocaster", Type.ELECTRIC, Wood.MAPLE, Wood.ALDER, 6)));

        inventory.addGuitar(new Final_Guitar("SN002", 1499.00, new GuitarSpec(
                Builder.MARTIN, "D-28", Type.ACOUSTIC, Wood.MAHOGANY, Wood.CEDAR, 6)));

        inventory.addGuitar(new Final_Guitar("SN003", 2499.00, new GuitarSpec(
                Builder.GIBSON, "Les Paul", Type.ELECTRIC, Wood.MAPLE, Wood.MAPLE, 6)));
    }
}
