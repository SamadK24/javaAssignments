package com.swabhav.GuitarFinal.test;

import java.util.*;

import com.swabhav.GuitarFinal.model.*;

public class GuitarMain {

    private static final Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        GuitarInventory inventory = new GuitarInventory();
        initializeInventory(inventory);

        System.out.println("Welcome to the Guitar Inventory System!");
        while (true) {
            System.out.println("\nAre you an Admin or a User?");
            System.out.println("1. Admin");
            System.out.println("2. User");
            System.out.println("3. Exit");
            System.out.print("Enter your choice (e.g. 1): ");
            String roleChoice = sc.nextLine();

            switch (roleChoice) {
                case "1":
                    showAdminMenu(inventory);
                    break;
                case "2":
                    showUserMenu(inventory);
                    break;
                case "3":
                    System.out.println("Goodbye!");
                    return;
                default:
                    System.out.println("Invalid input. Please enter 1, 2, or 3.");
            }
        }
    }

    private static void showAdminMenu(GuitarInventory inventory) {
        while (true) {
            System.out.println("\n=== Admin Menu ===");
            System.out.println("1. Add Guitar");
            System.out.println("2. View Inventory");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice (e.g. 1): ");
            String choice = sc.nextLine();

            switch (choice) {
                case "1":
                    addGuitarFlow(inventory);
                    break;
                case "2":
                    viewInventory(inventory);
                    break;
                case "3":
                    return;
                default:
                    System.out.println("Invalid input. Please enter 1, 2, or 3.");
            }
        }
    }

    private static void showUserMenu(GuitarInventory inventory) {
        while (true) {
            System.out.println("\n=== User Menu ===");
            System.out.println("1. Search for Guitar");
            System.out.println("2. Back to Main Menu");
            System.out.print("Enter your choice (e.g. 1): ");
            String choice = sc.nextLine();

            switch (choice) {
                case "1":
                    GuitarSpec searchSpec = getUserSearchSpec();
                    List<Final_Guitar> results = inventory.flexibleSearch(searchSpec);
                    if (results.isEmpty()) {
                        System.out.println("No matching guitars found.");
                    } else {
                        System.out.println("\nMatching Guitars:");
                        for (Final_Guitar guitar : results) {
                            System.out.println(guitar);
                        }
                    }
                    break;
                case "2":
                    return;
                default:
                    System.out.println("Invalid input. Please enter 1 or 2.");
            }
        }
    }

    private static void addGuitarFlow(GuitarInventory inventory) {
        System.out.println("\n=== Add a New Guitar ===");
        String serialNumber = UUID.randomUUID().toString();
        double price = promptDouble("Enter price (e.g. 4999.99): ");

        GuitarSpec spec = getUserSearchSpec();
        inventory.addGuitar(serialNumber, price, spec);
        System.out.println("Guitar added successfully!");
    }

    private static GuitarSpec getUserSearchSpec() {
        Builder builder = promptEnum("Builder", Builder.values());
        String model = promptNonEmpty("Model (e.g. Stratocaster): ");
        Type type = promptEnum("Type", Type.values());
        Wood backWood = promptEnum("Back Wood", Wood.values());
        Wood topWood = promptEnum("Top Wood", Wood.values());
        int numStrings = promptInt("Number of Strings (e.g. 6): ");

        return new GuitarSpec(builder, model, type, backWood, topWood, numStrings);
    }

    private static void viewInventory(GuitarInventory inventory) {
        List<Final_Guitar> guitars = inventory.getAllGuitars();
        if (guitars.isEmpty()) {
            System.out.println("No guitars in inventory.");
            return;
        }
        System.out.println("\n=== Guitar Inventory ===");
        for (Final_Guitar guitar : guitars) {
            System.out.println(guitar);
        }
        System.out.println("=========================\n");
    }

    private static <T extends Enum<T>> T promptEnum(String fieldName, T[] values) {
        while (true) {
            System.out.print(fieldName + " " + Arrays.toString(values) + " [e.g. " + values[0] + "]: ");
            String input = sc.nextLine().toUpperCase();
            try {
                return Enum.valueOf(values[0].getDeclaringClass(), input);
            } catch (IllegalArgumentException e) {
                System.out.println("Error: Invalid input. Please follow the specified options.");
            }
        }
    }

    private static double promptDouble(String message) {
        while (true) {
            System.out.print(message);
            try {
                return Double.parseDouble(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Error: Please enter a valid number.");
            }
        }
    }

    private static int promptInt(String message) {
        while (true) {
            System.out.print(message);
            try {
                return Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Error: Please enter a valid integer.");
            }
        }
    }

    private static String promptNonEmpty(String message) {
        while (true) {
            System.out.print(message);
            String input = sc.nextLine();
            if (!input.trim().isEmpty()) {
                return input;
            }
            System.out.println("Error: Input cannot be empty.");
        }
    }

    private static void initializeInventory(GuitarInventory inventory) {
        inventory.addGuitar("1", 1500.0,
            new GuitarSpec(Builder.FENDER, "Stratocaster", Type.ELECTRIC, Wood.ALDER, Wood.ALDER, 6));
        inventory.addGuitar("2", 1200.0,
            new GuitarSpec(Builder.GIBSON, "Les Paul", Type.ELECTRIC, Wood.MAPLE, Wood.MAPLE, 6));
        inventory.addGuitar("3", 1000.0,
            new GuitarSpec(Builder.MARTIN, "D-28", Type.ACOUSTIC, Wood.BRAZILIAN_ROSEWOOD, Wood.ADIRONDACK, 6));
    }
}
