package com.swabhav.GuitarFinal.test;

import com.swabhav.GuitarFinal.model.*;

import java.util.*;

public class GuitarMain {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        GuitarInventory inventory = new GuitarInventory();

        while (true) {
            System.out.println("\n=============================");
            System.out.println("Welcome to Guitar Inventory");
            System.out.println("=============================");
            System.out.println("1. Admin");
            System.out.println("2. User");
            System.out.println("3. Exit");
            System.out.print("Enter your choice (1-3): ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    adminMenu(inventory);
                    break;
                case "2":
                    userMenu(inventory);
                    break;
                case "3":
                    System.out.println("Thank you for using the system!");
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    
    private static void adminMenu(GuitarInventory inventory) {
        while (true) {
            System.out.println("\n===== Admin Menu =====");
            System.out.println("1. Add Guitar");
            System.out.println("2. View Inventory");
            System.out.println("3. Back to Main Menu");
            System.out.print("Choose an option (1-3): ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    addGuitar(inventory);
                    break;
                case "2":
                    displayInventory(inventory.getAllGuitars());
                    break;
                case "3":
                    return;
                default:
                    System.out.println("Invalid option.");
            }
        }
    }

   
    private static void userMenu(GuitarInventory inventory) {
        while (true) {
            System.out.println("\n===== User Menu =====");
            System.out.println("1. Strict Search (All fields must match)");
            System.out.println("2. Flexible Search (Any fields can match)");
            System.out.println("3. Back to Main Menu");
            System.out.print("Choose an option (1-3): ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    GuitarSpec spec1 = readGuitarSpec();
                    displayInventory(inventory.search(spec1));
                    break;
                case "2":
                    GuitarSpec spec2 = readGuitarSpecOptional();
                    displayInventory(inventory.flexibleSearch(spec2));
                    break;
                case "3":
                    return;
                default:
                    System.out.println("Invalid option.");
            }
        }
    }

    
    private static void addGuitar(GuitarInventory inventory) {
        System.out.println("\n-- Enter Guitar Details --");
        System.out.print("Enter serial number: ");
        String serialNumber = scanner.nextLine().trim();

        double price = readDoubleInput("Enter price: ");
        Builder builder = readEnumInput("Select Builder", Builder.class);
        System.out.print("Enter model: ");
        String model = scanner.nextLine().trim();
        Type type = readEnumInput("Select Type", Type.class);
        Wood backWood = readEnumInput("Select Back Wood", Wood.class);
        Wood topWood = readEnumInput("Select Top Wood", Wood.class);
        int numStrings = readIntInput("Enter number of strings: ");

        GuitarSpec spec = new GuitarSpec(builder, model, type, backWood, topWood, numStrings);
        Final_Guitar guitar = new Final_Guitar(serialNumber, price, spec);
        inventory.addGuitar(guitar);

        System.out.println("âœ… Guitar added successfully.");
    }

    
    private static GuitarSpec readGuitarSpec() {
        System.out.println("\n-- Enter Search Criteria --");
        Builder builder = readEnumInput("Select Builder", Builder.class);
        System.out.print("Enter model: ");
        String model = scanner.nextLine().trim();
        Type type = readEnumInput("Select Type", Type.class);
        Wood backWood = readEnumInput("Select Back Wood", Wood.class);
        Wood topWood = readEnumInput("Select Top Wood", Wood.class);
        int numStrings = readIntInput("Enter number of strings: ");

        return new GuitarSpec(builder, model, type, backWood, topWood, numStrings);
    }

   
    private static GuitarSpec readGuitarSpecOptional() {
        System.out.println("\n-- Enter Search Criteria (Press Enter to skip a field) --");
        Builder builder = readEnumInputOptional("Select Builder", Builder.class);
        System.out.print("Enter model: ");
        String model = scanner.nextLine().trim();
        Type type = readEnumInputOptional("Select Type", Type.class);
        Wood backWood = readEnumInputOptional("Select Back Wood", Wood.class);
        Wood topWood = readEnumInputOptional("Select Top Wood", Wood.class);
        Integer numStrings = readIntInputOptional("Enter number of strings: ");

        return new GuitarSpec(builder, model, type, backWood, topWood, numStrings != null ? numStrings : 0);
    }

  
    private static void displayInventory(List<Final_Guitar> guitars) {
        if (guitars.isEmpty()) {
            System.out.println("No matching guitars found.");
        } else {
            System.out.println("\n--- Matching Guitars ---");
            for (Final_Guitar guitar : guitars) {
                System.out.println(guitar);
            }
        }
    }

    
    private static <T extends Enum<T>> T readEnumInput(String prompt, Class<T> enumClass) {
        T[] values = enumClass.getEnumConstants();
        while (true) {
            System.out.println("\n" + prompt + ":");
            for (int i = 0; i < values.length; i++) {
                System.out.printf("%d. %s\n", i + 1, values[i].name());
            }
            System.out.print("Choose (1-" + values.length + "): ");
            String input = scanner.nextLine();
            try {
                int choice = Integer.parseInt(input);
                if (choice >= 1 && choice <= values.length) {
                    return values[choice - 1];
                } else {
                    System.out.println("Invalid choice.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid number.");
            }
        }
    }

    
    private static <T extends Enum<T>> T readEnumInputOptional(String prompt, Class<T> enumClass) {
        T[] values = enumClass.getEnumConstants();
        System.out.println("\n" + prompt + ":");
        for (int i = 0; i < values.length; i++) {
            System.out.printf("%d. %s\n", i + 1, values[i].name());
        }
        System.out.print("Choose (1-" + values.length + ") or press Enter to skip: ");
        String input = scanner.nextLine();
        if (input.isEmpty()) return null;
        try {
            int choice = Integer.parseInt(input);
            if (choice >= 1 && choice <= values.length) {
                return values[choice - 1];
            } else {
                System.out.println("Invalid choice. Skipping.");
                return null;
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Skipping.");
            return null;
        }
    }

    
    private static double readDoubleInput(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine();
            try {
                return Double.parseDouble(input);
            } catch (NumberFormatException e) {
                System.out.println("Enter a valid number.");
            }
        }
    }

    private static int readIntInput(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine();
            try {
                return Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("Enter a valid integer.");
            }
        }
    }

   
    private static Integer readIntInputOptional(String prompt) {
        System.out.print(prompt);
        String input = scanner.nextLine();
        if (input.isEmpty()) return null;
        try {
            return Integer.parseInt(input);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Skipping.");
            return null;
        }
    }
}
